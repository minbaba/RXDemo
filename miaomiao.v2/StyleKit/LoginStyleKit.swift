//
//  LoginStyleKit.swift
//  miaomiao.v2
//
//  Created by minbaba on 16/8/10.
//  Copyright (c) 2016 MiaoquTech Inc. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

import UIKit

public class LoginStyleKit {

    //// Drawing Methods
    public class func drawGenderPicker(size size: CGSize, gender: Int) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fitstText = ColorConf.Text.FirstTextColor.toColor()
        let sepratorColor = ColorConf.View.Seprator.toColor()

        //// seprator Drawing
        let sepratorPath = UIBezierPath(roundedRect: CGRectMake((size.width - 0.5) / 2, (size.height - 20) / 2, 0.5, 20), cornerRadius: 0)
        sepratorColor.setFill()
        sepratorPath.fill()

        //// maleRect Drawing
        let maleRectRect = CGRectMake(0, 0, size.width / 2, size.height)
        let maleRectPath = UIBezierPath(roundedRect: maleRectRect, byRoundingCorners: [UIRectCorner.TopLeft, UIRectCorner.BottomLeft], cornerRadii: CGSizeMake(5, 5))
        maleRectPath.closePath()
        (gender == 1 ? ColorConf.tag.Male.toColor(): UIColor.whiteColor()).setFill()
        maleRectPath.fill()
        let maleRectTextContent = NSString(string: "男")
        let maleRectStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        maleRectStyle.alignment = .Center

        let maleRectFontAttributes = [NSFontAttributeName: FontSizeConf.Second.toFont(), NSForegroundColorAttributeName: (gender == 1 ? UIColor.whiteColor(): fitstText), NSParagraphStyleAttributeName: maleRectStyle]

        let maleRectTextHeight: CGFloat = maleRectTextContent.boundingRectWithSize(CGSizeMake(maleRectRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: maleRectFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, maleRectRect);
        maleRectTextContent.drawInRect(CGRectMake(maleRectRect.minX, maleRectRect.minY + (maleRectRect.height - maleRectTextHeight) / 2, maleRectRect.width, maleRectTextHeight), withAttributes: maleRectFontAttributes)
        CGContextRestoreGState(context)


        //// FemaleRect Drawing
        let femaleRectRect = CGRectMake(size.width / 2, 0, size.width / 2, size.height)
        let femaleRectPath = UIBezierPath(roundedRect: femaleRectRect, byRoundingCorners: [UIRectCorner.TopRight, UIRectCorner.BottomRight], cornerRadii: CGSizeMake(5, 5))
        femaleRectPath.closePath()
        (gender == 0 ? ColorConf.tag.Female.toColor(): UIColor.whiteColor()).setFill()
        femaleRectPath.fill()
        let femaleRectTextContent = NSString(string: "女")
        let femaleRectStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        femaleRectStyle.alignment = .Center

        let femaleRectFontAttributes = [NSFontAttributeName: FontSizeConf.Second.toFont(), NSForegroundColorAttributeName: (gender == 0 ? UIColor.whiteColor(): fitstText), NSParagraphStyleAttributeName: femaleRectStyle]

        let femaleRectTextHeight: CGFloat = femaleRectTextContent.boundingRectWithSize(CGSizeMake(femaleRectRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: femaleRectFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, femaleRectRect);
        femaleRectTextContent.drawInRect(CGRectMake(femaleRectRect.minX, femaleRectRect.minY + (femaleRectRect.height - femaleRectTextHeight) / 2, femaleRectRect.width, femaleRectTextHeight), withAttributes: femaleRectFontAttributes)
        CGContextRestoreGState(context)
    }
    
    
    public class func drawOhterLoginButton(title title: String = "微信", image: UIImage, touche: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let secondColor = ColorConf.Text.SecondTextColor.toColor()
        let color = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.356)
        
        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 40, 40))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextScaleCTM(context, 1, -1)
        CGContextDrawTiledImage(context, CGRectMake(0, 0, image.size.width, image.size.height), image.CGImage)
        CGContextRestoreGState(context)
        
        
        //// Rectangle Drawing
        let rectangleRect = CGRectMake(0, 50, 40, 15)
        let rectangleStyle = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        rectangleStyle.alignment = .Center
        
        let rectangleFontAttributes = [NSFontAttributeName: FontSizeConf.Second.toFont(), NSForegroundColorAttributeName: secondColor, NSParagraphStyleAttributeName: rectangleStyle]
        
        let rectangleTextHeight: CGFloat = NSString(string: title).boundingRectWithSize(CGSizeMake(rectangleRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, rectangleRect);
        NSString(string: title).drawInRect(CGRectMake(rectangleRect.minX, rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, rectangleRect.width, rectangleTextHeight), withAttributes: rectangleFontAttributes)
        CGContextRestoreGState(context)
        
        
        //// Group 2
        if (touche) {
            //// Oval 2 Drawing
            let oval2Path = UIBezierPath(ovalInRect: CGRectMake(0, 0, 40, 40))
            color.setFill()
            oval2Path.fill()
            
            
            //// Rectangle 2 Drawing
            let rectangle2Rect = CGRectMake(0, 50, 40, 15)
            let rectangle2Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
            rectangle2Style.alignment = .Center
            
            let rectangle2FontAttributes = [NSFontAttributeName: FontSizeConf.Second.toFont(), NSForegroundColorAttributeName: UIColor.darkGrayColor(), NSParagraphStyleAttributeName: rectangle2Style]
            
            let rectangle2TextHeight: CGFloat = NSString(string: title).boundingRectWithSize(CGSizeMake(rectangle2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: rectangle2FontAttributes, context: nil).size.height
            CGContextSaveGState(context)
            CGContextClipToRect(context, rectangle2Rect);
            NSString(string: title).drawInRect(CGRectMake(rectangle2Rect.minX, rectangle2Rect.minY + (rectangle2Rect.height - rectangle2TextHeight) / 2, rectangle2Rect.width, rectangle2TextHeight), withAttributes: rectangle2FontAttributes)
            CGContextRestoreGState(context)
        }
    }



}
